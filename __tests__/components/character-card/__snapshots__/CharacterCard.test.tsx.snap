// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CharacterCard renders properly with: Alive status 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "opacity": 1,
      "paddingHorizontal": 24,
      "paddingVertical": 8,
    }
  }
  testID="character-card-wrapper"
>
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "rgb(60, 62, 68)",
        "borderRadius": 8,
        "flexDirection": "row",
        "minHeight": 80,
        "width": "100%",
      }
    }
  >
    <Image
      resizeMode="contain"
      source={
        {
          "uri": "https://rickandmortyapi.com/api/character/avatar/400.jpeg",
        }
      }
      style={
        {
          "borderBottomLeftRadius": 8,
          "borderTopLeftRadius": 8,
          "height": 80,
          "width": 80,
        }
      }
    />
    <View
      style={
        {
          "flex": 1,
          "padding": 8,
        }
      }
    >
      <Text
        style={
          {
            "color": "white",
            "flex": 1,
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        testing name
      </Text>
      <Text
        style={
          {
            "color": "white",
            "fontSize": 12,
          }
        }
      >
        Status: 
        <Text
          style={
            {
              "color": "green",
            }
          }
        >
          Alive
        </Text>
      </Text>
    </View>
  </View>
</View>
`;

exports[`CharacterCard renders properly with: Dead status 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "opacity": 1,
      "paddingHorizontal": 24,
      "paddingVertical": 8,
    }
  }
  testID="character-card-wrapper"
>
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "rgb(60, 62, 68)",
        "borderRadius": 8,
        "flexDirection": "row",
        "minHeight": 80,
        "width": "100%",
      }
    }
  >
    <Image
      resizeMode="contain"
      source={
        {
          "uri": "https://rickandmortyapi.com/api/character/avatar/400.jpeg",
        }
      }
      style={
        {
          "borderBottomLeftRadius": 8,
          "borderTopLeftRadius": 8,
          "height": 80,
          "width": 80,
        }
      }
    />
    <View
      style={
        {
          "flex": 1,
          "padding": 8,
        }
      }
    >
      <Text
        style={
          {
            "color": "white",
            "flex": 1,
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        testing name
      </Text>
      <Text
        style={
          {
            "color": "white",
            "fontSize": 12,
          }
        }
      >
        Status: 
        <Text
          style={
            {
              "color": "red",
            }
          }
        >
          Dead
        </Text>
      </Text>
    </View>
  </View>
</View>
`;

exports[`CharacterCard renders properly with: unknown status 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    {
      "opacity": 1,
      "paddingHorizontal": 24,
      "paddingVertical": 8,
    }
  }
  testID="character-card-wrapper"
>
  <View
    style={
      {
        "alignItems": "center",
        "backgroundColor": "rgb(60, 62, 68)",
        "borderRadius": 8,
        "flexDirection": "row",
        "minHeight": 80,
        "width": "100%",
      }
    }
  >
    <Image
      resizeMode="contain"
      source={
        {
          "uri": "https://rickandmortyapi.com/api/character/avatar/400.jpeg",
        }
      }
      style={
        {
          "borderBottomLeftRadius": 8,
          "borderTopLeftRadius": 8,
          "height": 80,
          "width": 80,
        }
      }
    />
    <View
      style={
        {
          "flex": 1,
          "padding": 8,
        }
      }
    >
      <Text
        style={
          {
            "color": "white",
            "flex": 1,
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        testing name
      </Text>
      <Text
        style={
          {
            "color": "white",
            "fontSize": 12,
          }
        }
      >
        Status: 
        <Text
          style={
            {
              "color": "grey",
            }
          }
        >
          unknown
        </Text>
      </Text>
    </View>
  </View>
</View>
`;
